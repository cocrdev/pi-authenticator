// Mocks generated by Mockito 5.4.2 from annotations
// in privacyidea_authenticator/test/integration_test/tests_app_wrapper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:flutter_riverpod/flutter_riverpod.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:privacyidea_authenticator/model/push_request.dart' as _i8;
import 'package:privacyidea_authenticator/model/states/token_state.dart' as _i2;
import 'package:privacyidea_authenticator/model/token_folder.dart' as _i11;
import 'package:privacyidea_authenticator/model/tokens/hotp_token.dart' as _i7;
import 'package:privacyidea_authenticator/model/tokens/push_token.dart' as _i9;
import 'package:privacyidea_authenticator/model/tokens/token.dart' as _i6;
import 'package:privacyidea_authenticator/state_notifiers/token_notifier.dart'
    as _i3;
import 'package:state_notifier/state_notifier.dart' as _i10;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTokenState_0 extends _i1.SmartFake implements _i2.TokenState {
  _FakeTokenState_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TokenNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockTokenNotifier extends _i1.Mock implements _i3.TokenNotifier {
  @override
  set isLoading(_i4.Future<void>? _isLoading) => super.noSuchMethod(
        Invocation.setter(
          #isLoading,
          _isLoading,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set onError(_i5.ErrorListener? _onError) => super.noSuchMethod(
        Invocation.setter(
          #onError,
          _onError,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get mounted => (super.noSuchMethod(
        Invocation.getter(#mounted),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i4.Stream<_i2.TokenState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i4.Stream<_i2.TokenState>.empty(),
        returnValueForMissingStub: _i4.Stream<_i2.TokenState>.empty(),
      ) as _i4.Stream<_i2.TokenState>);
  @override
  _i2.TokenState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeTokenState_0(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeTokenState_0(
          this,
          Invocation.getter(#state),
        ),
      ) as _i2.TokenState);
  @override
  set state(_i2.TokenState? value) => super.noSuchMethod(
        Invocation.setter(
          #state,
          value,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.TokenState get debugState => (super.noSuchMethod(
        Invocation.getter(#debugState),
        returnValue: _FakeTokenState_0(
          this,
          Invocation.getter(#debugState),
        ),
        returnValueForMissingStub: _FakeTokenState_0(
          this,
          Invocation.getter(#debugState),
        ),
      ) as _i2.TokenState);
  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i4.Future<bool> refreshRolledOutPushTokens() => (super.noSuchMethod(
        Invocation.method(
          #refreshRolledOutPushTokens,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
        returnValueForMissingStub: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
  @override
  _i6.Token? getTokenFromId(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getTokenFromId,
          [id],
        ),
        returnValueForMissingStub: null,
      ) as _i6.Token?);
  @override
  void incrementCounter(_i7.HOTPToken? token) => super.noSuchMethod(
        Invocation.method(
          #incrementCounter,
          [token],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeToken(_i6.Token? token) => super.noSuchMethod(
        Invocation.method(
          #removeToken,
          [token],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addOrReplaceToken(_i6.Token? token) => super.noSuchMethod(
        Invocation.method(
          #addOrReplaceToken,
          [token],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addOrReplaceTokens(List<_i6.Token>? updatedTokens) => super.noSuchMethod(
        Invocation.method(
          #addOrReplaceTokens,
          [updatedTokens],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i4.Future<bool> addTokenFromOtpAuth({required String? otpAuth}) =>
      (super.noSuchMethod(
        Invocation.method(
          #addTokenFromOtpAuth,
          [],
          {#otpAuth: otpAuth},
        ),
        returnValue: _i4.Future<bool>.value(false),
        returnValueForMissingStub: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
  @override
  _i4.Future<bool> addPushRequestToToken(_i8.PushRequest? pr) =>
      (super.noSuchMethod(
        Invocation.method(
          #addPushRequestToToken,
          [pr],
        ),
        returnValue: _i4.Future<bool>.value(false),
        returnValueForMissingStub: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
  @override
  bool removePushRequest(_i8.PushRequest? pushRequest) => (super.noSuchMethod(
        Invocation.method(
          #removePushRequest,
          [pushRequest],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i4.Future<bool> rolloutPushToken(_i9.PushToken? token) =>
      (super.noSuchMethod(
        Invocation.method(
          #rolloutPushToken,
          [token],
        ),
        returnValue: _i4.Future<bool>.value(false),
        returnValueForMissingStub: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
  @override
  bool updateShouldNotify(
    _i2.TokenState? old,
    _i2.TokenState? current,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateShouldNotify,
          [
            old,
            current,
          ],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i5.RemoveListener addListener(
    _i10.Listener<_i2.TokenState>? listener, {
    bool? fireImmediately = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
          {#fireImmediately: fireImmediately},
        ),
        returnValue: () {},
        returnValueForMissingStub: () {},
      ) as _i5.RemoveListener);
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [TokenState].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockTokenState extends _i1.Mock implements _i2.TokenState {
  @override
  List<_i6.Token> get tokens => (super.noSuchMethod(
        Invocation.getter(#tokens),
        returnValue: <_i6.Token>[],
        returnValueForMissingStub: <_i6.Token>[],
      ) as List<_i6.Token>);
  @override
  _i2.TokenState repaceList({List<_i6.Token>? tokens}) => (super.noSuchMethod(
        Invocation.method(
          #repaceList,
          [],
          {#tokens: tokens},
        ),
        returnValue: _FakeTokenState_0(
          this,
          Invocation.method(
            #repaceList,
            [],
            {#tokens: tokens},
          ),
        ),
        returnValueForMissingStub: _FakeTokenState_0(
          this,
          Invocation.method(
            #repaceList,
            [],
            {#tokens: tokens},
          ),
        ),
      ) as _i2.TokenState);
  @override
  _i2.TokenState withToken(_i6.Token? token) => (super.noSuchMethod(
        Invocation.method(
          #withToken,
          [token],
        ),
        returnValue: _FakeTokenState_0(
          this,
          Invocation.method(
            #withToken,
            [token],
          ),
        ),
        returnValueForMissingStub: _FakeTokenState_0(
          this,
          Invocation.method(
            #withToken,
            [token],
          ),
        ),
      ) as _i2.TokenState);
  @override
  _i2.TokenState withTokens(List<_i6.Token>? tokens) => (super.noSuchMethod(
        Invocation.method(
          #withTokens,
          [tokens],
        ),
        returnValue: _FakeTokenState_0(
          this,
          Invocation.method(
            #withTokens,
            [tokens],
          ),
        ),
        returnValueForMissingStub: _FakeTokenState_0(
          this,
          Invocation.method(
            #withTokens,
            [tokens],
          ),
        ),
      ) as _i2.TokenState);
  @override
  _i2.TokenState withoutToken(_i6.Token? token) => (super.noSuchMethod(
        Invocation.method(
          #withoutToken,
          [token],
        ),
        returnValue: _FakeTokenState_0(
          this,
          Invocation.method(
            #withoutToken,
            [token],
          ),
        ),
        returnValueForMissingStub: _FakeTokenState_0(
          this,
          Invocation.method(
            #withoutToken,
            [token],
          ),
        ),
      ) as _i2.TokenState);
  @override
  _i2.TokenState withoutTokens(List<_i6.Token>? tokens) => (super.noSuchMethod(
        Invocation.method(
          #withoutTokens,
          [tokens],
        ),
        returnValue: _FakeTokenState_0(
          this,
          Invocation.method(
            #withoutTokens,
            [tokens],
          ),
        ),
        returnValueForMissingStub: _FakeTokenState_0(
          this,
          Invocation.method(
            #withoutTokens,
            [tokens],
          ),
        ),
      ) as _i2.TokenState);
  @override
  _i2.TokenState addOrReplaceToken(_i6.Token? token) => (super.noSuchMethod(
        Invocation.method(
          #addOrReplaceToken,
          [token],
        ),
        returnValue: _FakeTokenState_0(
          this,
          Invocation.method(
            #addOrReplaceToken,
            [token],
          ),
        ),
        returnValueForMissingStub: _FakeTokenState_0(
          this,
          Invocation.method(
            #addOrReplaceToken,
            [token],
          ),
        ),
      ) as _i2.TokenState);
  @override
  _i2.TokenState addOrReplaceTokens(List<_i6.Token>? tokens) =>
      (super.noSuchMethod(
        Invocation.method(
          #addOrReplaceTokens,
          [tokens],
        ),
        returnValue: _FakeTokenState_0(
          this,
          Invocation.method(
            #addOrReplaceTokens,
            [tokens],
          ),
        ),
        returnValueForMissingStub: _FakeTokenState_0(
          this,
          Invocation.method(
            #addOrReplaceTokens,
            [tokens],
          ),
        ),
      ) as _i2.TokenState);
  @override
  List<_i6.Token> tokensInFolder(_i11.TokenFolder? folder) =>
      (super.noSuchMethod(
        Invocation.method(
          #tokensInFolder,
          [folder],
        ),
        returnValue: <_i6.Token>[],
        returnValueForMissingStub: <_i6.Token>[],
      ) as List<_i6.Token>);
  @override
  List<_i6.Token> tokensWithoutFolder() => (super.noSuchMethod(
        Invocation.method(
          #tokensWithoutFolder,
          [],
        ),
        returnValue: <_i6.Token>[],
        returnValueForMissingStub: <_i6.Token>[],
      ) as List<_i6.Token>);
}
